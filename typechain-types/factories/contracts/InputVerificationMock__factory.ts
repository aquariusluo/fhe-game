/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  InputVerificationMock,
  InputVerificationMockInterface,
} from "../../contracts/InputVerificationMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "zkProofId",
        type: "uint256",
      },
    ],
    name: "RejectProofResponse",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "zkProofId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "contractChainId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "ciphertextWithZKProof",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "VerifyProofRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "zkProofId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "ctHandles",
        type: "bytes32[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "signatures",
        type: "bytes[]",
      },
    ],
    name: "VerifyProofResponse",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "zkProofId",
        type: "uint256",
      },
    ],
    name: "getProofRequest",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "contractChainId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "userAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "ciphertextWithZKProof",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
        ],
        internalType: "struct InputVerificationMock.ProofRequest",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proofRequests",
    outputs: [
      {
        internalType: "uint256",
        name: "contractChainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "ciphertextWithZKProof",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "zkProofId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "rejectProofResponse",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contractChainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "ciphertextWithZKProof",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "verifyProofRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "zkProofId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "zkProofId",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "ctHandles",
        type: "bytes32[]",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "verifyProofResponse",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "zkProofIdCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a5760008055610b0690816100208239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c908163152a95261461079257508063258257461461070457806331bedea314610549578063338007fc146104ce578063a7004996146100845763afb3c50e1461006157600080fd5b3461007f57600036600319011261007f576020600054604051908152f35b600080fd5b3461007f5760a036600319011261007f576024356001600160a01b038116810361007f576044356001600160a01b038116810361007f5760643567ffffffffffffffff811161007f576100db9036906004016109d7565b60849391933567ffffffffffffffff811161007f576100fe9036906004016109d7565b916000549460001986146104b8576001860160005560405196610120886108f4565b60043588526001600160a01b0386811660208a015282166040890152610147368483610a68565b6060890152610157368686610a68565b6080890152600187016000526001602052604060002097805189556001890160018060a01b03602083015116906bffffffffffffffffffffffff60a01b918282541617905560028a019060018060a01b0360408401511690825416179055606081015180519067ffffffffffffffff82116103dd576101d960038c01546108ba565b601f8111610471575b50602090601f83116001146103fe576080939291600091836103f3575b50508160011b916000199060031b1c19161760038b01555b015197885167ffffffffffffffff81116103dd5761023860048301546108ba565b99601f8b11610396575b60209a508a90601f83116001146102fd57926004836102c2947f4ae54f6a6e900d806ffa5bb46ed91459523d2f6ac9b5d62404feab887686d005999897946102e4976000926102f2575b50508160011b916000199060031b1c1916179101555b60405194859460018060a01b0316855260608c8601526060850191610aaf565b82810360408401526001600160a01b03909716966004359660018a0196610aaf565b0390a4600160405191018152f35b015190508f8061028c565b90600484016000528b6000209160005b601f198516811061037f57506001847f4ae54f6a6e900d806ffa5bb46ed91459523d2f6ac9b5d62404feab887686d005999897946102e497946004946102c298601f19811610610366575b505050811b019101556102a2565b015160001960f88460031b161c191690558f8080610358565b91928d60018192868501518155019401920161030d565b600483016000526020600020601f830160051c8101602084106103d6575b601f8d0160051c820181106103ca575050610242565b600081556001016103b4565b50806103b4565b634e487b7160e01b600052604160045260246000fd5b015190508c806101ff565b9060038c0160005260206000209160005b601f1985168110610459575091839160019360809695601f19811610610440575b505050811b0160038b0155610217565b015160001960f88460031b161c191690558c8080610430565b9192602060018192868501518155019401920161040f565b60038c016000526020600020601f840160051c8101602085106104b1575b601f830160051c820181106104a55750506101e2565b6000815560010161048f565b508061048f565b634e487b7160e01b600052601160045260246000fd5b3461007f57604036600319011261007f5760043560243567ffffffffffffffff811161007f576105029036906004016109d7565b50508015158061053d575b61051690610a05565b7fe465e141fa8abd95ab7e0855543307f8506ab0170ef664420fb71ab7de0183de600080a2005b5060005481111561050d565b3461007f57608036600319011261007f5760043560243567ffffffffffffffff80821161007f573660238301121561007f5781600401359181831161007f578260051b366024828401011161007f5760443583811161007f576105b09036906004016109d7565b91909260643585811161007f576105cb9036906004016109d7565b5050861515806106f8575b6105df90610a05565b8660005260019360209360018552604051966040880190888210908211176103dd57604052600187528460005b8181106106e857505090610621913691610a68565b61062a86610a45565b5261063485610a45565b5060408051818152908101879052956001600160fb1b031061007f5760248291949394016060870137840191606083019060608685030181870152845180925260808401938160808460051b8301019601946000915b8483106106ba57897ffe2c43585786a5a658d2ec5df5dea3fb3385b77c94f60f724ff810896f4198358a8a038ba2005b909192939484806106d783999a607f198682030187528b5161087a565b99019301930191959493929061068a565b606082828b01015201859061060c565b506000548711156105d6565b3461007f57602036600319011261007f5760043560005260016020526040600020805461078e60018060a01b039261078084600183015416946002830154169161075c600461075560038401610932565b9201610932565b9260405196879687526020870152604086015260a0606086015260a085019061087a565b90838203608085015261087a565b0390f35b3461007f576020908160031936011261007f576080816107b36060936108f4565b60008152600084820152600060408201528280820152015260043560005260018152604060002061078e604051916107ea836108f4565b8054835261086b60018060a01b03918260018201541692868601938452806002830154166040870190815281610835600461082760038701610932565b9560608b0196875201610932565b9560808901968752604051998a99818b5251908a015251166040880152511660608601525160a0608086015260c085019061087a565b9051838203601f190160a08501525b919082519283825260005b8481106108a6575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610885565b90600182811c921680156108ea575b60208310146108d457565b634e487b7160e01b600052602260045260246000fd5b91607f16916108c9565b60a0810190811067ffffffffffffffff8211176103dd57604052565b90601f8019910116810190811067ffffffffffffffff8211176103dd57604052565b90604051918260008254610945816108ba565b908184526020946001916001811690816000146109b55750600114610976575b50505061097492500383610910565b565b600090815285812095935091905b81831061099d5750506109749350820101388080610965565b85548884018501529485019487945091830191610984565b9250505061097494925060ff191682840152151560051b820101388080610965565b9181601f8401121561007f5782359167ffffffffffffffff831161007f576020838186019501011161007f57565b15610a0c57565b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081e9ad41c9bdbd99259607a1b6044820152606490fd5b805115610a525760200190565b634e487b7160e01b600052603260045260246000fd5b92919267ffffffffffffffff82116103dd5760405191610a92601f8201601f191660200184610910565b82948184528183011161007f578281602093846000960137010152565b908060209392818452848401376000828201840152601f01601f191601019056fea264697066735822122051f8b1bab7ed418dfa6fe13a9e04f9e41a431e8fee004738c0a18479fd3ecbe764736f6c63430008180033";

type InputVerificationMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InputVerificationMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InputVerificationMock__factory extends ContractFactory {
  constructor(...args: InputVerificationMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      InputVerificationMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): InputVerificationMock__factory {
    return super.connect(runner) as InputVerificationMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InputVerificationMockInterface {
    return new Interface(_abi) as InputVerificationMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): InputVerificationMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as InputVerificationMock;
  }
}
