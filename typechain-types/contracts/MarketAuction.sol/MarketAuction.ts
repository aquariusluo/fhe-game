/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MarketAuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUCTION_DURATION"
      | "AUCTION_MANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "GOOD_TYPE_ARTIFACTS"
      | "GOOD_TYPE_GEMS"
      | "GOOD_TYPE_GOLD_BARS"
      | "GOOD_TYPE_SILK"
      | "GOOD_TYPE_SPICES"
      | "MAX_SIMULTANEOUS_AUCTIONS"
      | "_decryptReservePrice"
      | "activeAuctionCount"
      | "auctionCounter"
      | "auctionParticipants"
      | "auctions"
      | "batchResolveAuctions"
      | "bids"
      | "claimReward"
      | "createAuction"
      | "emergencyEndAuction"
      | "getActiveAuctions"
      | "getAuctionInfo"
      | "getAuctionParticipants"
      | "getAuctionStats"
      | "getGoodTypeName"
      | "getMyWins"
      | "getRoleAdmin"
      | "grantRole"
      | "hasClaimedReward"
      | "hasRole"
      | "hasUserBid"
      | "inputVerificationAddress"
      | "onProofVerified"
      | "pendingBids"
      | "placeBid"
      | "renounceRole"
      | "resolveAuction"
      | "revokeRole"
      | "rewardsClaimed"
      | "supportsInterface"
      | "updateAuctionDuration"
      | "useInputVerificationGateway"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionCreated"
      | "AuctionEnded"
      | "AuctionResolved"
      | "BidPlaced"
      | "BidProofRequested"
      | "BidProofVerified"
      | "RewardClaimed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUCTION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUCTION_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOOD_TYPE_ARTIFACTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOOD_TYPE_GEMS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOOD_TYPE_GOLD_BARS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOOD_TYPE_SILK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOOD_TYPE_SPICES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SIMULTANEOUS_AUCTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_decryptReservePrice",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activeAuctionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionParticipants",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchResolveAuctions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyEndAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGoodTypeName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyWins",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserBid",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inputVerificationAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onProofVerified",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingBids",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "useInputVerificationGateway",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUCTION_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOOD_TYPE_ARTIFACTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOOD_TYPE_GEMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOOD_TYPE_GOLD_BARS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOOD_TYPE_SILK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOOD_TYPE_SPICES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SIMULTANEOUS_AUCTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_decryptReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAuctionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchResolveAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyEndAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoodTypeName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyWins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasUserBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inputVerificationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onProofVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useInputVerificationGateway",
    data: BytesLike
  ): Result;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    goodType: BigNumberish,
    creator: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    goodType: bigint,
    creator: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    goodType: bigint;
    creator: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    hadWinner: boolean,
    endedAt: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    hadWinner: boolean,
    endedAt: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    hadWinner: boolean;
    endedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionResolvedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    winner: AddressLike,
    goodType: BigNumberish,
    resolvedAt: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    winner: string,
    goodType: bigint,
    resolvedAt: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    winner: string;
    goodType: bigint;
    resolvedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    bidder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    bidder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidProofRequestedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidder: AddressLike,
    zkProofId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    bidder: string,
    zkProofId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    bidder: string;
    zkProofId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidProofVerifiedEvent {
  export type InputTuple = [
    zkProofId: BigNumberish,
    auctionId: BigNumberish,
    bidder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    zkProofId: bigint,
    auctionId: bigint,
    bidder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    zkProofId: bigint;
    auctionId: bigint;
    bidder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    winner: AddressLike,
    goodType: BigNumberish,
    claimedAt: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    winner: string,
    goodType: bigint,
    claimedAt: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    winner: string;
    goodType: bigint;
    claimedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketAuction extends BaseContract {
  connect(runner?: ContractRunner | null): MarketAuction;
  waitForDeployment(): Promise<this>;

  interface: MarketAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUCTION_DURATION: TypedContractMethod<[], [bigint], "view">;

  AUCTION_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GOOD_TYPE_ARTIFACTS: TypedContractMethod<[], [bigint], "view">;

  GOOD_TYPE_GEMS: TypedContractMethod<[], [bigint], "view">;

  GOOD_TYPE_GOLD_BARS: TypedContractMethod<[], [bigint], "view">;

  GOOD_TYPE_SILK: TypedContractMethod<[], [bigint], "view">;

  GOOD_TYPE_SPICES: TypedContractMethod<[], [bigint], "view">;

  MAX_SIMULTANEOUS_AUCTIONS: TypedContractMethod<[], [bigint], "view">;

  _decryptReservePrice: TypedContractMethod<
    [reservePrice: BytesLike, proof: BytesLike],
    [string],
    "nonpayable"
  >;

  activeAuctionCount: TypedContractMethod<[], [bigint], "view">;

  auctionCounter: TypedContractMethod<[], [bigint], "view">;

  auctionParticipants: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint
      ] & {
        auctionId: bigint;
        goodType: bigint;
        reservePrice: string;
        highestBid: string;
        highestBidder: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isResolved: boolean;
        participantCount: bigint;
        creator: string;
        currentWinner: string;
        resolvedWinner: string;
        usesPlaintext: boolean;
        reservePricePlain: bigint;
        highestBidPlain: bigint;
      }
    ],
    "view"
  >;

  batchResolveAuctions: TypedContractMethod<
    [auctionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  bids: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, boolean, boolean, boolean, bigint, boolean, bigint] & {
        amount: string;
        timestamp: bigint;
        isActive: boolean;
        isWinning: boolean;
        usesPlaintext: boolean;
        amountPlain: bigint;
        isPendingVerification: boolean;
        zkProofId: bigint;
      }
    ],
    "view"
  >;

  claimReward: TypedContractMethod<
    [auctionId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  createAuction: TypedContractMethod<
    [
      goodType: BigNumberish,
      reservePrice: BytesLike,
      proof: BytesLike,
      durationSeconds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  emergencyEndAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveAuctions: TypedContractMethod<[], [bigint[]], "view">;

  getAuctionInfo: TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, boolean, bigint, string] & {
        goodType: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isResolved: boolean;
        participantCount: bigint;
        creator: string;
      }
    ],
    "view"
  >;

  getAuctionParticipants: TypedContractMethod<
    [auctionId: BigNumberish],
    [string[]],
    "view"
  >;

  getAuctionStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalAuctions: bigint;
        activeAuctions: bigint;
        resolvedAuctions: bigint;
      }
    ],
    "view"
  >;

  getGoodTypeName: TypedContractMethod<
    [goodType: BigNumberish],
    [string],
    "view"
  >;

  getMyWins: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasClaimedReward: TypedContractMethod<
    [auctionId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasUserBid: TypedContractMethod<
    [auctionId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  inputVerificationAddress: TypedContractMethod<[], [string], "view">;

  onProofVerified: TypedContractMethod<
    [zkProofId: BigNumberish, verifiedHandles: BytesLike[]],
    [void],
    "nonpayable"
  >;

  pendingBids: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean] & {
        auctionId: bigint;
        bidder: string;
        bidAmount: string;
        isValid: boolean;
      }
    ],
    "view"
  >;

  placeBid: TypedContractMethod<
    [auctionId: BigNumberish, bidAmount: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  resolveAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rewardsClaimed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateAuctionDuration: TypedContractMethod<
    [newDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  useInputVerificationGateway: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUCTION_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "AUCTION_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GOOD_TYPE_ARTIFACTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOOD_TYPE_GEMS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOOD_TYPE_GOLD_BARS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOOD_TYPE_SILK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOOD_TYPE_SPICES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SIMULTANEOUS_AUCTIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_decryptReservePrice"
  ): TypedContractMethod<
    [reservePrice: BytesLike, proof: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "activeAuctionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionParticipants"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        string,
        string,
        boolean,
        bigint,
        bigint
      ] & {
        auctionId: bigint;
        goodType: bigint;
        reservePrice: string;
        highestBid: string;
        highestBidder: string;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isResolved: boolean;
        participantCount: bigint;
        creator: string;
        currentWinner: string;
        resolvedWinner: string;
        usesPlaintext: boolean;
        reservePricePlain: bigint;
        highestBidPlain: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchResolveAuctions"
  ): TypedContractMethod<[auctionIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, boolean, boolean, boolean, bigint, boolean, bigint] & {
        amount: string;
        timestamp: bigint;
        isActive: boolean;
        isWinning: boolean;
        usesPlaintext: boolean;
        amountPlain: bigint;
        isPendingVerification: boolean;
        zkProofId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[auctionId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      goodType: BigNumberish,
      reservePrice: BytesLike,
      proof: BytesLike,
      durationSeconds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyEndAuction"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveAuctions"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAuctionInfo"
  ): TypedContractMethod<
    [auctionId: BigNumberish],
    [
      [bigint, bigint, bigint, boolean, boolean, bigint, string] & {
        goodType: bigint;
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        isResolved: boolean;
        participantCount: bigint;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuctionParticipants"
  ): TypedContractMethod<[auctionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAuctionStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalAuctions: bigint;
        activeAuctions: bigint;
        resolvedAuctions: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGoodTypeName"
  ): TypedContractMethod<[goodType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMyWins"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasClaimedReward"
  ): TypedContractMethod<
    [auctionId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserBid"
  ): TypedContractMethod<
    [auctionId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "inputVerificationAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onProofVerified"
  ): TypedContractMethod<
    [zkProofId: BigNumberish, verifiedHandles: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingBids"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean] & {
        auctionId: bigint;
        bidder: string;
        bidAmount: string;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [auctionId: BigNumberish, bidAmount: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveAuction"
  ): TypedContractMethod<[auctionId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardsClaimed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateAuctionDuration"
  ): TypedContractMethod<[newDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "useInputVerificationGateway"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionResolved"
  ): TypedContractEvent<
    AuctionResolvedEvent.InputTuple,
    AuctionResolvedEvent.OutputTuple,
    AuctionResolvedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "BidProofRequested"
  ): TypedContractEvent<
    BidProofRequestedEvent.InputTuple,
    BidProofRequestedEvent.OutputTuple,
    BidProofRequestedEvent.OutputObject
  >;
  getEvent(
    key: "BidProofVerified"
  ): TypedContractEvent<
    BidProofVerifiedEvent.InputTuple,
    BidProofVerifiedEvent.OutputTuple,
    BidProofVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "AuctionCreated(uint256,uint8,address,uint256,uint256)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "AuctionEnded(uint256,bool,uint256)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "AuctionResolved(uint256,address,uint8,uint256)": TypedContractEvent<
      AuctionResolvedEvent.InputTuple,
      AuctionResolvedEvent.OutputTuple,
      AuctionResolvedEvent.OutputObject
    >;
    AuctionResolved: TypedContractEvent<
      AuctionResolvedEvent.InputTuple,
      AuctionResolvedEvent.OutputTuple,
      AuctionResolvedEvent.OutputObject
    >;

    "BidPlaced(uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "BidProofRequested(uint256,address,uint256,uint256)": TypedContractEvent<
      BidProofRequestedEvent.InputTuple,
      BidProofRequestedEvent.OutputTuple,
      BidProofRequestedEvent.OutputObject
    >;
    BidProofRequested: TypedContractEvent<
      BidProofRequestedEvent.InputTuple,
      BidProofRequestedEvent.OutputTuple,
      BidProofRequestedEvent.OutputObject
    >;

    "BidProofVerified(uint256,uint256,address,uint256)": TypedContractEvent<
      BidProofVerifiedEvent.InputTuple,
      BidProofVerifiedEvent.OutputTuple,
      BidProofVerifiedEvent.OutputObject
    >;
    BidProofVerified: TypedContractEvent<
      BidProofVerifiedEvent.InputTuple,
      BidProofVerifiedEvent.OutputTuple,
      BidProofVerifiedEvent.OutputObject
    >;

    "RewardClaimed(uint256,address,uint8,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
