/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IInputVerificationInterface extends Interface {
  getFunction(nameOrSignature: "verifyProofRequest"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "VerifyProofRequest"): EventFragment;

  encodeFunctionData(
    functionFragment: "verifyProofRequest",
    values: [BigNumberish, AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyProofRequest",
    data: BytesLike
  ): Result;
}

export namespace VerifyProofRequestEvent {
  export type InputTuple = [
    zkProofId: BigNumberish,
    contractChainId: BigNumberish,
    contractAddress: AddressLike,
    userAddress: AddressLike,
    ciphertextWithZKProof: BytesLike,
    extraData: BytesLike
  ];
  export type OutputTuple = [
    zkProofId: bigint,
    contractChainId: bigint,
    contractAddress: string,
    userAddress: string,
    ciphertextWithZKProof: string,
    extraData: string
  ];
  export interface OutputObject {
    zkProofId: bigint;
    contractChainId: bigint;
    contractAddress: string;
    userAddress: string;
    ciphertextWithZKProof: string;
    extraData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInputVerification extends BaseContract {
  connect(runner?: ContractRunner | null): IInputVerification;
  waitForDeployment(): Promise<this>;

  interface: IInputVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyProofRequest: TypedContractMethod<
    [
      contractChainId: BigNumberish,
      contractAddress: AddressLike,
      userAddress: AddressLike,
      ciphertextWithZKProof: BytesLike,
      extraData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyProofRequest"
  ): TypedContractMethod<
    [
      contractChainId: BigNumberish,
      contractAddress: AddressLike,
      userAddress: AddressLike,
      ciphertextWithZKProof: BytesLike,
      extraData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "VerifyProofRequest"
  ): TypedContractEvent<
    VerifyProofRequestEvent.InputTuple,
    VerifyProofRequestEvent.OutputTuple,
    VerifyProofRequestEvent.OutputObject
  >;

  filters: {
    "VerifyProofRequest(uint256,uint256,address,address,bytes,bytes)": TypedContractEvent<
      VerifyProofRequestEvent.InputTuple,
      VerifyProofRequestEvent.OutputTuple,
      VerifyProofRequestEvent.OutputObject
    >;
    VerifyProofRequest: TypedContractEvent<
      VerifyProofRequestEvent.InputTuple,
      VerifyProofRequestEvent.OutputTuple,
      VerifyProofRequestEvent.OutputObject
    >;
  };
}
