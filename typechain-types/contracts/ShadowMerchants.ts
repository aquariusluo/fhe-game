/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ShadowMerchantsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUCTION_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ENERGY_REGEN_AMOUNT"
      | "ENERGY_REGEN_INTERVAL"
      | "GAME_MANAGER_ROLE"
      | "INITIAL_ENERGY"
      | "INITIAL_GOLD"
      | "INITIAL_REPUTATION"
      | "MAX_ENERGY"
      | "MAX_PLAYERS"
      | "MAX_ROUNDS"
      | "MISSION_ROLE"
      | "ROUND_DURATION"
      | "activePlayers"
      | "canPlayerAct"
      | "endGame"
      | "gameState"
      | "getActivePlayers"
      | "getGameInfo"
      | "getPlayerInfo"
      | "getRoleAdmin"
      | "grantAuctionRole"
      | "grantMissionRole"
      | "grantRole"
      | "hasRole"
      | "joinGame"
      | "leaveGame"
      | "players"
      | "progressRound"
      | "regenerateEnergy"
      | "renounceRole"
      | "revokeRole"
      | "spendEnergy"
      | "spendGold"
      | "startGame"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EnergyRegenerated"
      | "GameEnded"
      | "GameStarted"
      | "PlayerJoined"
      | "PlayerLeft"
      | "ResourcesUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoundProgressed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AUCTION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENERGY_REGEN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENERGY_REGEN_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAME_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_ENERGY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_GOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_REPUTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ENERGY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ROUNDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MISSION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUND_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activePlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canPlayerAct",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "endGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActivePlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuctionRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMissionRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "leaveGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "progressRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "regenerateEnergy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spendEnergy",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spendGold",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENERGY_REGEN_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENERGY_REGEN_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAME_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_ENERGY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_GOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_REPUTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_ENERGY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_ROUNDS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MISSION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROUND_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPlayerAct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAuctionRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMissionRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaveGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "progressRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regenerateEnergy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spendEnergy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spendGold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace EnergyRegeneratedEvent {
  export type InputTuple = [player: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [player: string, timestamp: bigint];
  export interface OutputObject {
    player: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [winner: AddressLike, endTime: BigNumberish];
  export type OutputTuple = [winner: string, endTime: bigint];
  export interface OutputObject {
    winner: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [startTime: BigNumberish, maxPlayers: BigNumberish];
  export type OutputTuple = [startTime: bigint, maxPlayers: bigint];
  export interface OutputObject {
    startTime: bigint;
    maxPlayers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [player: AddressLike, round: BigNumberish];
  export type OutputTuple = [player: string, round: bigint];
  export interface OutputObject {
    player: string;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerLeftEvent {
  export type InputTuple = [player: AddressLike, round: BigNumberish];
  export type OutputTuple = [player: string, round: bigint];
  export interface OutputObject {
    player: string;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourcesUpdatedEvent {
  export type InputTuple = [player: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [player: string, timestamp: bigint];
  export interface OutputObject {
    player: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundProgressedEvent {
  export type InputTuple = [newRound: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [newRound: bigint, timestamp: bigint];
  export interface OutputObject {
    newRound: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShadowMerchants extends BaseContract {
  connect(runner?: ContractRunner | null): ShadowMerchants;
  waitForDeployment(): Promise<this>;

  interface: ShadowMerchantsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUCTION_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ENERGY_REGEN_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  ENERGY_REGEN_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  GAME_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  INITIAL_ENERGY: TypedContractMethod<[], [bigint], "view">;

  INITIAL_GOLD: TypedContractMethod<[], [bigint], "view">;

  INITIAL_REPUTATION: TypedContractMethod<[], [bigint], "view">;

  MAX_ENERGY: TypedContractMethod<[], [bigint], "view">;

  MAX_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  MAX_ROUNDS: TypedContractMethod<[], [bigint], "view">;

  MISSION_ROLE: TypedContractMethod<[], [string], "view">;

  ROUND_DURATION: TypedContractMethod<[], [bigint], "view">;

  activePlayers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  canPlayerAct: TypedContractMethod<
    [playerAddress: AddressLike],
    [boolean],
    "view"
  >;

  endGame: TypedContractMethod<[], [void], "nonpayable">;

  gameState: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean, string] & {
        currentRound: bigint;
        gameStartTime: bigint;
        lastRoundTime: bigint;
        maxPlayers: bigint;
        playerCount: bigint;
        gameActive: boolean;
        gameEnded: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  getActivePlayers: TypedContractMethod<[], [string[]], "view">;

  getGameInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean, string] & {
        currentRound: bigint;
        gameStartTime: bigint;
        lastRoundTime: bigint;
        playerCount: bigint;
        gameActive: boolean;
        gameEnded: boolean;
        winner: string;
      }
    ],
    "view"
  >;

  getPlayerInfo: TypedContractMethod<
    [playerAddress: AddressLike],
    [
      [boolean, boolean, bigint, bigint, bigint] & {
        isActive: boolean;
        hasJoined: boolean;
        joinedRound: bigint;
        publicReputationTier: bigint;
        lastActionTime: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantAuctionRole: TypedContractMethod<
    [auctionContract: AddressLike],
    [void],
    "nonpayable"
  >;

  grantMissionRole: TypedContractMethod<
    [missionContract: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  joinGame: TypedContractMethod<
    [
      encryptedGold: BytesLike,
      goldProof: BytesLike,
      encryptedReputation: BytesLike,
      reputationProof: BytesLike,
      encryptedEnergy: BytesLike,
      energyProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  leaveGame: TypedContractMethod<[], [void], "nonpayable">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        gold: string;
        reputation: string;
        energy: string;
        usesPlaintext: boolean;
        goldPlain: bigint;
        reputationPlain: bigint;
        energyPlain: bigint;
        isActive: boolean;
        hasJoined: boolean;
        joinedRound: bigint;
        lastActionTime: bigint;
        lastEnergyRegen: bigint;
        publicReputationTier: bigint;
      }
    ],
    "view"
  >;

  progressRound: TypedContractMethod<[], [void], "nonpayable">;

  regenerateEnergy: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  spendEnergy: TypedContractMethod<
    [amount: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  spendGold: TypedContractMethod<
    [amount: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  startGame: TypedContractMethod<[], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUCTION_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ENERGY_REGEN_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ENERGY_REGEN_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GAME_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INITIAL_ENERGY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INITIAL_GOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INITIAL_REPUTATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ENERGY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ROUNDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MISSION_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROUND_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activePlayers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "canPlayerAct"
  ): TypedContractMethod<[playerAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "endGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameState"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean, string] & {
        currentRound: bigint;
        gameStartTime: bigint;
        lastRoundTime: bigint;
        maxPlayers: bigint;
        playerCount: bigint;
        gameActive: boolean;
        gameEnded: boolean;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getActivePlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, boolean, boolean, string] & {
        currentRound: bigint;
        gameStartTime: bigint;
        lastRoundTime: bigint;
        playerCount: bigint;
        gameActive: boolean;
        gameEnded: boolean;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [playerAddress: AddressLike],
    [
      [boolean, boolean, bigint, bigint, bigint] & {
        isActive: boolean;
        hasJoined: boolean;
        joinedRound: bigint;
        publicReputationTier: bigint;
        lastActionTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantAuctionRole"
  ): TypedContractMethod<[auctionContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantMissionRole"
  ): TypedContractMethod<[missionContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<
    [
      encryptedGold: BytesLike,
      goldProof: BytesLike,
      encryptedReputation: BytesLike,
      reputationProof: BytesLike,
      encryptedEnergy: BytesLike,
      energyProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leaveGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        string,
        string,
        string,
        boolean,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        gold: string;
        reputation: string;
        energy: string;
        usesPlaintext: boolean;
        goldPlain: bigint;
        reputationPlain: bigint;
        energyPlain: bigint;
        isActive: boolean;
        hasJoined: boolean;
        joinedRound: bigint;
        lastActionTime: bigint;
        lastEnergyRegen: bigint;
        publicReputationTier: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "progressRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "regenerateEnergy"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spendEnergy"
  ): TypedContractMethod<
    [amount: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spendGold"
  ): TypedContractMethod<
    [amount: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "EnergyRegenerated"
  ): TypedContractEvent<
    EnergyRegeneratedEvent.InputTuple,
    EnergyRegeneratedEvent.OutputTuple,
    EnergyRegeneratedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerLeft"
  ): TypedContractEvent<
    PlayerLeftEvent.InputTuple,
    PlayerLeftEvent.OutputTuple,
    PlayerLeftEvent.OutputObject
  >;
  getEvent(
    key: "ResourcesUpdated"
  ): TypedContractEvent<
    ResourcesUpdatedEvent.InputTuple,
    ResourcesUpdatedEvent.OutputTuple,
    ResourcesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoundProgressed"
  ): TypedContractEvent<
    RoundProgressedEvent.InputTuple,
    RoundProgressedEvent.OutputTuple,
    RoundProgressedEvent.OutputObject
  >;

  filters: {
    "EnergyRegenerated(address,uint256)": TypedContractEvent<
      EnergyRegeneratedEvent.InputTuple,
      EnergyRegeneratedEvent.OutputTuple,
      EnergyRegeneratedEvent.OutputObject
    >;
    EnergyRegenerated: TypedContractEvent<
      EnergyRegeneratedEvent.InputTuple,
      EnergyRegeneratedEvent.OutputTuple,
      EnergyRegeneratedEvent.OutputObject
    >;

    "GameEnded(address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameStarted(uint256,uint8)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "PlayerJoined(address,uint256)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "PlayerLeft(address,uint256)": TypedContractEvent<
      PlayerLeftEvent.InputTuple,
      PlayerLeftEvent.OutputTuple,
      PlayerLeftEvent.OutputObject
    >;
    PlayerLeft: TypedContractEvent<
      PlayerLeftEvent.InputTuple,
      PlayerLeftEvent.OutputTuple,
      PlayerLeftEvent.OutputObject
    >;

    "ResourcesUpdated(address,uint256)": TypedContractEvent<
      ResourcesUpdatedEvent.InputTuple,
      ResourcesUpdatedEvent.OutputTuple,
      ResourcesUpdatedEvent.OutputObject
    >;
    ResourcesUpdated: TypedContractEvent<
      ResourcesUpdatedEvent.InputTuple,
      ResourcesUpdatedEvent.OutputTuple,
      ResourcesUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoundProgressed(uint256,uint256)": TypedContractEvent<
      RoundProgressedEvent.InputTuple,
      RoundProgressedEvent.OutputTuple,
      RoundProgressedEvent.OutputObject
    >;
    RoundProgressed: TypedContractEvent<
      RoundProgressedEvent.InputTuple,
      RoundProgressedEvent.OutputTuple,
      RoundProgressedEvent.OutputObject
    >;
  };
}
